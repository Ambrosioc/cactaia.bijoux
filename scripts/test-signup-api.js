require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Variables d\'environnement manquantes');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testSignupAPI() {
    console.log('üéØ Test de l\'API d\'inscription...\n');

    try {
        // 1. Tester la cr√©ation d'un utilisateur auth
        console.log('1Ô∏è‚É£ Test cr√©ation utilisateur auth...');
        
        const testEmail = `test${Date.now()}@example.com`;
        const { data: authData, error: authError } = await supabase.auth.signUp({
            email: testEmail,
            password: '123456',
        });

        if (authError) {
            console.error('‚ùå Erreur cr√©ation auth:', authError);
            return;
        }

        if (!authData.user) {
            console.error('‚ùå Pas d\'utilisateur cr√©√© dans auth');
            return;
        }

        console.log('‚úÖ Utilisateur auth cr√©√©:', authData.user.id);

        // 2. Attendre un peu
        console.log('\n2Ô∏è‚É£ Attente de 2 secondes...');
        await new Promise(resolve => setTimeout(resolve, 2000));

        // 3. V√©rifier que l'utilisateur existe dans auth.users
        console.log('\n3Ô∏è‚É£ V√©rification dans auth.users...');
        const { data: authUser, error: authUserError } = await supabase.auth.admin.getUserById(authData.user.id);
        
        if (authUserError) {
            console.error('‚ùå Erreur r√©cup√©ration auth user:', authUserError);
        } else {
            console.log('‚úÖ Utilisateur trouv√© dans auth.users');
        }

        // 3.5. V√©rifier si l'utilisateur existe d√©j√† dans la table users
        console.log('\n3Ô∏è‚É£.5Ô∏è‚É£ V√©rification dans table users...');
        const { data: existingUser, error: existingUserError } = await supabase
            .from('users')
            .select('*')
            .eq('id', authData.user.id)
            .single();
        
        if (existingUserError && existingUserError.code !== 'PGRST116') {
            console.error('‚ùå Erreur v√©rification table users:', existingUserError);
        } else if (existingUser) {
            console.log('‚ö†Ô∏è Utilisateur existe d√©j√† dans table users, suppression...');
            await supabase.from('users').delete().eq('id', authData.user.id);
            console.log('‚úÖ Utilisateur supprim√© de la table users');
        } else {
            console.log('‚úÖ Utilisateur n\'existe pas dans table users');
        }

        // 4. Tester l'insertion dans la table users
        console.log('\n4Ô∏è‚É£ Test insertion dans table users...');
        
        const userProfile = {
            id: authData.user.id,
            email: testEmail,
            nom: 'Test',
            prenom: 'User',
            genre: 'Homme',
            date_naissance: '1990-01-01',
            cgv_accepted: true,
            cgv_accepted_at: new Date().toISOString(),
            newsletter: false,
            profile_completed: true,
            active_role: 'user'
        };

        const { data: profileData, error: profileError } = await supabase
            .from('users')
            .insert(userProfile)
            .select()
            .single();

        if (profileError) {
            console.error('‚ùå Erreur insertion profil:', profileError);
            
            // Analyser l'erreur
            if (profileError.code === '23503') {
                console.log('üí° Erreur cl√© √©trang√®re - l\'utilisateur n\'existe pas dans auth.users');
            } else if (profileError.code === '23502') {
                console.log('üí° Erreur NOT NULL - colonne obligatoire manquante');
            } else if (profileError.code === '42703') {
                console.log('üí° Erreur colonne inexistante');
            }
            
            return;
        }

        console.log('‚úÖ Profil utilisateur cr√©√©:', profileData.id);

        // 5. Nettoyage
        console.log('\n5Ô∏è‚É£ Nettoyage...');
        
        // Supprimer le profil
        await supabase.from('users').delete().eq('id', authData.user.id);
        console.log('‚úÖ Profil supprim√©');
        
        // Supprimer l'utilisateur auth
        await supabase.auth.admin.deleteUser(authData.user.id);
        console.log('‚úÖ Utilisateur auth supprim√©');

        console.log('\nüéâ Test termin√© avec succ√®s !');

    } catch (error) {
        console.error('‚ùå Erreur g√©n√©rale:', error);
    }
}

// Ex√©cuter le test
testSignupAPI();
