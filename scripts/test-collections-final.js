require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Variables d\'environnement Supabase manquantes');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testCollectionsFinal() {
    console.log('üéØ Test final du syst√®me de collections et cat√©gories...\n');

    try {
        // 1. V√©rifier que les tables existent
        console.log('1Ô∏è‚É£ V√©rification des tables...');
        
        const { data: categories, error: categoriesError } = await supabase
            .from('categories')
            .select('*')
            .limit(5);

        if (categoriesError) {
            console.error('‚ùå Table categories non trouv√©e:', categoriesError.message);
            return;
        }

        const { data: collections, error: collectionsError } = await supabase
            .from('collections')
            .select('*')
            .limit(5);

        if (collectionsError) {
            console.error('‚ùå Table collections non trouv√©e:', collectionsError.message);
            return;
        }

        console.log('‚úÖ Tables categories et collections trouv√©es');
        console.log(`   - ${categories?.length || 0} cat√©gories`);
        console.log(`   - ${collections?.length || 0} collections`);

        // 2. Afficher les cat√©gories
        console.log('\n2Ô∏è‚É£ Cat√©gories:');
        categories?.forEach((cat, index) => {
            console.log(`   ${index + 1}. ${cat.name} (${cat.slug}) - ${cat.is_active ? '‚úÖ' : '‚ùå'}`);
        });

        // 3. Afficher les collections
        console.log('\n3Ô∏è‚É£ Collections:');
        collections?.forEach((col, index) => {
            console.log(`   ${index + 1}. ${col.name} (${col.slug}) - ${col.is_featured ? '‚≠ê' : '‚ö™'} - ${col.is_active ? '‚úÖ' : '‚ùå'}`);
        });

        // 4. Tester la cr√©ation d'une collection
        console.log('\n4Ô∏è‚É£ Test de cr√©ation d\'une collection...');
        
        const testCollection = {
            name: 'Collection Test Final',
            slug: 'collection-test-final',
            description: 'Collection de test pour v√©rifier le syst√®me final',
            is_active: true,
            is_featured: false,
            sort_order: 100
        };

        const { data: newCollection, error: createError } = await supabase
            .from('collections')
            .insert(testCollection)
            .select()
            .single();

        if (createError) {
            console.error('‚ùå Erreur cr√©ation collection:', createError.message);
        } else {
            console.log('‚úÖ Collection cr√©√©e:', newCollection.id);
        }

        // 5. Tester la r√©cup√©ration des collections avec produits
        console.log('\n5Ô∏è‚É£ Test de r√©cup√©ration des collections avec produits...');
        
        const { data: collectionsWithProducts, error: productsError } = await supabase
            .from('collections')
            .select(`
                *,
                product_collections!inner(
                    product_id
                )
            `)
            .order('name');

        if (productsError) {
            console.error('‚ùå Erreur r√©cup√©ration collections avec produits:', productsError.message);
        } else {
            console.log('‚úÖ Collections avec produits r√©cup√©r√©es:');
            collectionsWithProducts?.forEach(col => {
                const productCount = col.product_collections?.length || 0;
                console.log(`   - ${col.name}: ${productCount} produit(s)`);
            });
        }

        // 6. Nettoyer la collection de test
        if (newCollection) {
            console.log('\n6Ô∏è‚É£ Nettoyage de la collection de test...');
            
            const { error: deleteError } = await supabase
                .from('collections')
                .delete()
                .eq('id', newCollection.id);

            if (deleteError) {
                console.error('‚ùå Erreur suppression collection test:', deleteError.message);
            } else {
                console.log('‚úÖ Collection de test supprim√©e');
            }
        }

        console.log('\nüéâ Tests termin√©s avec succ√®s !');
        console.log('\nüí° Le syst√®me est maintenant pr√™t !');
        console.log('   1. Connectez-vous en tant qu\'admin');
        console.log('   2. Allez sur /admin/collections');
        console.log('   3. Testez la cr√©ation d\'une collection');
        console.log('   4. V√©rifiez que les cat√©gories et collections s\'affichent dans le formulaire de produit');

    } catch (error) {
        console.error('‚ùå Erreur lors des tests:', error);
    }
}

// Ex√©cuter les tests
testCollectionsFinal();
